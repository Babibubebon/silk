############################################################################################################################################
# Workspace
############################################################################################################################################

GET           /                                                                 controllers.workspace.Workspace.index
GET           /tree                                                             controllers.workspace.Workspace.tree
GET           /status                                                           controllers.workspace.Workspace.status

GET           /dialogs/newproject                                               controllers.workspace.Workspace.newProjectDialog()
GET           /dialogs/importproject                                            controllers.workspace.Workspace.importProjectDialog()
GET           /dialogs/importlinkspec/:project                                  controllers.workspace.Workspace.importLinkSpecDialog(project: String)
GET           /dialogs/prefixes/:project                                        controllers.workspace.Workspace.prefixDialog(project: String)
GET           /dialogs/resources/:project                                       controllers.workspace.Workspace.resourcesDialog(project: String)
GET           /dialogs/executeProject/:project                                  controllers.workspace.Workspace.executeProjectDialog(project: String)
GET           /dialogs/activityConfig/:project/:activity                        controllers.workspace.Workspace.projectActivityConfigDialog(project: String, activity: String)
GET           /dialogs/activityConfig/:project/:task/:activity                  controllers.workspace.Workspace.taskActivityConfigDialog(project: String, task: String, activity: String)
POST          /:project/importExample                                           controllers.workspace.Workspace.importExample(project: String)

############################################################################################################################################
# Datasets
############################################################################################################################################

# Dialogs
GET           /dialogs/newDataset/:project                                      controllers.workspace.Datasets.datasetDialog(project: String, task = "")
GET           /dialogs/editDataset/:project/:task                               controllers.workspace.Datasets.datasetDialog(project: String, task: String)
GET           /dialogs/editDatasetAutoConfigured/:project/:task/:pluginId       controllers.workspace.Datasets.datasetDialogAutoConfigured(project, task, pluginId)

# Tabs
GET           /datasets/:project/:task/dataset                                  controllers.workspace.Datasets.dataset(project, task)
GET           /datasets/:project/:task/table                                    controllers.workspace.Datasets.table(project, task, maxEntities: Int ?= 20)
GET           /datasets/:project/:task/sparql                                   controllers.workspace.Datasets.sparql(project, task, query ?= "")
GET           /datasets/:project/:task/types                                    controllers.workspace.Datasets.types(project, task, search)

# API
GET           /projects/:project/datasets/:name                                 controllers.workspace.Datasets.getDataset(project: String, name: String)
GET           /projects/:project/datasets/:name/autoConfigured                  controllers.workspace.Datasets.getDatasetAutoConfigured(project: String, name: String)
PUT           /projects/:project/datasets/:name                                 controllers.workspace.Datasets.putDataset(project: String, name: String, autoConfigure: Boolean ?= false)
DELETE        /projects/:project/datasets/:name                                 controllers.workspace.Datasets.deleteDataset(project: String, name: String)
GET           /projects/:project/datasets/:name/types                           controllers.workspace.Datasets.getDatasetTypes(project: String, name: String)

############################################################################################################################################
# CustomTasks
############################################################################################################################################

# Dialogs
GET           /customTasks/newTaskDialog/:project                                controllers.workspace.CustomTasks.taskDialog(project: String, task = "")
GET           /customTasks/editTaskDialog/:project/:task                               controllers.workspace.CustomTasks.taskDialog(project: String, task: String)

# API
GET           /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.getTask(project: String, name: String)
PUT           /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.putTask(project: String, name: String)
DELETE        /projects/:project/customTasks/:name                               controllers.workspace.CustomTasks.deleteTask(project: String, name: String)

############################################################################################################################################
# Workspace API
############################################################################################################################################

# Reload Workspace
POST          /reload                                                           controllers.workspace.WorkspaceApi.reload

# Projects
GET           /projects                                                         controllers.workspace.WorkspaceApi.projects
GET           /projects/:project                                                controllers.workspace.WorkspaceApi.getProject(project: String)
PUT           /projects/:project                                                controllers.workspace.WorkspaceApi.newProject(project: String)
DELETE        /projects/:project                                                controllers.workspace.WorkspaceApi.deleteProject(project: String)
POST          /projects/:project/import                                         controllers.workspace.WorkspaceApi.importProject(project: String)
GET           /projects/:project/export                                         controllers.workspace.WorkspaceApi.exportProject(project: String)
POST          /projects/:project/importLinkSpec                                 controllers.workspace.WorkspaceApi.importLinkSpec(project: String)
GET           /projects/:project/:task/exportLinkSpec                           controllers.workspace.WorkspaceApi.exportLinkSpec(project: String, task: String)
PUT           /projects/:project/prefixes                                       controllers.workspace.WorkspaceApi.updatePrefixes(project: String)
POST          /projects/:project/execute                                        controllers.workspace.WorkspaceApi.executeProject(project: String)

# Resources
GET           /projects/:project/resources                                      controllers.workspace.WorkspaceApi.getResources(project: String)
GET           /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.getResource(project: String, name: String)
PUT           /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.putResource(project: String, name: String)
DELETE        /projects/:project/resources/:name                                controllers.workspace.WorkspaceApi.deleteResource(project: String, name: String)

# Project Activities
GET           /projects/:project/activities                                     controllers.workspace.WorkspaceApi.getProjectActivities(project: String)
POST          /projects/:project/activities/:activity/start                     controllers.workspace.WorkspaceApi.startActivity(project: String, task = "", activity: String, blocking: Boolean = false)
POST          /projects/:project/activities/:activity/startBlocking             controllers.workspace.WorkspaceApi.startActivity(project: String, task = "", activity: String, blocking: Boolean = true)
POST          /projects/:project/activities/:activity/cancel                    controllers.workspace.WorkspaceApi.cancelActivity(project: String, task = "", activity: String)
POST          /projects/:project/activities/:activity/restart                   controllers.workspace.WorkspaceApi.restartActivity(project: String, task= "", activity: String)
GET           /projects/:project/activities/:activity/config                    controllers.workspace.WorkspaceApi.getActivityConfig(project: String, task = "", activity: String)
POST          /projects/:project/activities/:activity/config                    controllers.workspace.WorkspaceApi.postActivityConfig(project: String, task = "", activity: String)
GET           /projects/:project/activities/:activity/status                    controllers.workspace.WorkspaceApi.getActivityStatus(project: String, task = "", activity: String)
GET           /projects/:project/activities/:activity/value                     controllers.workspace.WorkspaceApi.getActivityValue(project: String, task = "", activity: String)

# Task Activities
GET           /projects/:project/tasks/:task/activities                         controllers.workspace.WorkspaceApi.getTaskActivities(project: String, task: String)
POST          /projects/:project/tasks/:task/activities/:activity/start         controllers.workspace.WorkspaceApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = false)
POST          /projects/:project/tasks/:task/activities/:activity/startBlocking controllers.workspace.WorkspaceApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = true)
POST          /projects/:project/tasks/:task/activities/:activity/cancel        controllers.workspace.WorkspaceApi.cancelActivity(project: String, task: String, activity: String)
POST          /projects/:project/tasks/:task/activities/:activity/restart       controllers.workspace.WorkspaceApi.restartActivity(project: String, task: String, activity: String)
GET           /projects/:project/tasks/:task/activities/:activity/config        controllers.workspace.WorkspaceApi.getActivityConfig(project: String, task: String, activity: String)
POST          /projects/:project/tasks/:task/activities/:activity/config        controllers.workspace.WorkspaceApi.postActivityConfig(project: String, task: String, activity: String)
GET           /projects/:project/tasks/:task/activities/:activity/status        controllers.workspace.WorkspaceApi.getActivityStatus(project: String, task: String, activity: String)
GET           /projects/:project/tasks/:task/activities/:activity/value         controllers.workspace.WorkspaceApi.getActivityValue(project: String, task: String, activity: String)

# General Activities API
POST          /activities/start                                                 controllers.workspace.WorkspaceApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = false)
POST          /activities/startBlocking                                         controllers.workspace.WorkspaceApi.startActivity(project: String, task: String, activity: String, blocking: Boolean = true)
POST          /activities/cancel                                                controllers.workspace.WorkspaceApi.cancelActivity(project: String, task: String, activity: String)
GET           /activities/config                                                controllers.workspace.WorkspaceApi.getActivityConfig(project: String, task: String, activity: String)
POST          /activities/config                                                controllers.workspace.WorkspaceApi.postActivityConfig(project: String, task: String, activity: String)
GET           /activities/status                                                controllers.workspace.WorkspaceApi.getActivityStatus(project: String, task: String, activity: String)
GET           /activities/recent                                                controllers.workspace.WorkspaceApi.recentActivities(maxCount: Int ?= 10)
GET           /activities/log                                                   controllers.workspace.WorkspaceApi.activityLog()
GET           /activities/updates                                               controllers.workspace.WorkspaceApi.activityUpdates(project: String, task: String, activity: String)

############################################################################################################################################
# Assets
############################################################################################################################################

GET           /assets/*file                                                     controllers.workspace.Assets.at(path="/public", file)