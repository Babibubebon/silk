package de.fuberlin.wiwiss.silk.runtime.activity

import de.fuberlin.wiwiss.silk.util.StringUtils._
import sun.reflect.generics.reflectiveObjects.NotImplementedException
import scala.concurrent.ExecutionContext

/**
 * An activity is a unit of work that can be executed in the background.
 * Implementing classes need to override the run method.
 *
 * @tparam T The type of value that is generated by this activity.
 *           Set to [[Unit]] if not values are generated.
 */
trait Activity[T] extends HasValue {

  /**
   * The name of the activity.
   * By default, the name is generated from the name of the implementing class.
   * Can be overridden in implementing classes.
   */
  def name: String = getClass.getSimpleName.undoCamelCase

  /**
   * Executes this activity.
   *
   * @param context Holds the context in which the activity is executed.
   */
  def run(context: ActivityContext[T]): Unit

  /**
   *  Can be overridden in implementing classes to allow cancellation of the activity.
   */
  def cancelExecution(): Unit = { }

  def initialValue: T = throw new NotImplementedError()

  /**
   * Captures the bound value type.
   */
  type ValueType = T
}

/**
 * Executes activities.
 */
object Activity {

  /**
   * Executes an activity in the background.
   *
   * @param activity The activity to be executed.
   * @return An [ActivityControl] instance that can be used to monitor the execution status as well as the current value
   *         and allows to request the cancellation of the execution.
   */
  def execute[T](activity: Activity[T]): ActivityControl[T] = {
    val execution = new ActivityExecution[T](activity)
    ExecutionContext.global.execute(execution)
    execution
  }

  def executeBlocking[T](activity: Activity[T]): T = {
    val execution = new ActivityExecution[T](activity)
    execution.run()
    execution.value()
  }

  def control[T](activity: Activity[T]): ActivityControl[T] = {
    new ActivityExecution[T](activity)
  }

  /**
   * Creates an empty activity control.
   */
  def empty[T] = execute(new Activity[T] { def run(context: ActivityContext[T]) = { } })

}



