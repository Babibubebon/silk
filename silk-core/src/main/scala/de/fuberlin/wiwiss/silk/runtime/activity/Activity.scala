package de.fuberlin.wiwiss.silk.runtime.activity

import de.fuberlin.wiwiss.silk.util.StringUtils._

/**
 * An activity is a unit of work that can be executed in the background.
 * Implementing classes need to override the run method.
 *
 * @tparam T The type of value that is generated by this activity.
 *           Set to [[Unit]] if no values are generated.
 */
trait Activity[T] extends HasValue {

  /**
   * The name of the activity.
   * By default, the name is generated from the name of the implementing class.
   * Can be overridden in implementing classes.
   */
  def name: String = getClass.getSimpleName.undoCamelCase

  /**
   * Executes this activity.
   *
   * @param context Holds the context in which the activity is executed.
   */
  def run(context: ActivityContext[T]): Unit

  /**
   *  Can be overridden in implementing classes to allow cancellation of the activity.
   */
  def cancelExecution(): Unit = { }

  /**
   * The initial value of this activity, if any.
   */
  def initialValue: Option[T] = None

  /**
   * Captures the bound value type.
   */
  type ValueType = T
}

/**
 * Executes activities.
 */
object Activity {
  /**
   * Retrieves a control for an activity without executing it.
   * The [ActivityControl] instance can be used to start the execution of the activity.
   * After that it can be used to monitor the execution status as well as the current value and allows to request the cancellation of the execution.
   */
  def apply[T](activity: Activity[T]): ActivityControl[T] = {
    new ActivityExecution[T](activity)
  }
}



